git@github.com:yxm1128/HFL.git

git@github.com:liuxiaoqing1001/HFL.git


-----------------------------------项目说明-----------------------------------------
“HFL”视频平台开发与设计
主要技术:
	bootstrap做前台页面
	后端技术Springboot+mybatis_plus+redis


-------------------------------------相关参考料---------------------------------------


https://www.jianshu.com/p/9ebad61aea22

https://blog.csdn.net/qq_38850266/article/details/105734453


-----------------------------------项目说明-----------------------------------------
UI图片说明：
进入-弹框（登录注册/游客身份）

-首页.png
--修改部分：
---头像和搜索调换，头像前加实时时间，头像实现下拉（消息，创作中心，个人中心，修改密码，注销）
---导航栏：推荐，影视，新闻生活，美食，音乐

--注明：
---导航栏的设置图标：可修改导航栏（比如 标签顺序or添加导航栏标签）
---

-个人中心.png


平台主页：
	登录/注册（游客身份）
	视频推荐（点击视频-视频基本信息，视频收藏，点评，点赞）
	视频搜索
	个人中心（个人信息（修改信息，修改密码）示）
	视频中心
	消息（视频审核通知，用户私信，其他用户点赞收藏的通知）
	
		后台管理（用户管理（用户新增，用户修改，用户删除）
	视频管理（视频发布（需要审核），视频修改（修改后需要审核），视频删除）
		用户角色管理
		视频类型管理）
		
		
改进之处：
不支持超过10GB以上的大文件上传，改进方法：可通过中间介质，如OSS；前端分片断点续传将本地文件上传至OSS，后端流式读写将数据从OSS同步至ODPS

视频审核改进：编写一个处理工具，由这个工具做筛选，管理员只需要设置条件操作这个工具，而不用亲自审查，减少工作量，并提高效率		
		
		
------------------------------------项目部署-----------------------------------------
DevTools、Lombok、Web、Thymeleaf，MyBatis-plus

**********pom.xml 添加D依赖项**********
<properties>
        <java.version>1.8</java.version>
        <druid.version>1.1.21</druid.version>
        <mybatis-plus.version>3.4.0</mybatis-plus.version>
</properties>

<!-- redis依赖（还没看明白）-->
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>
<dependency>
	<groupId>org.apache.commons</groupId>
	<artifactId>commons-pool2</artifactId>
</dependency>
    
<!-- druid数据源-->
<dependency>
	<groupId>com.alibaba</groupId>
	<artifactId>druid</artifactId>
	<version>${druid.version}</version>
</dependency>

<!-- 添加依赖mybatis-plus-->
<dependency>
	<groupId>com.baomidou</groupId>
	<artifactId>mybatis-plus-boot-starter-test</artifactId>
	<version>${mybatis-plus.version}</version>
</dependency>


**********application.properties 中添加配置项**********
# 应用程序占用的端口号
server.port=8090

# 配置数据源
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

#打印日志
logging.level.com.example.hfl.dao=debug

#数据库连接


#引入mybatis plus框架
mybatis-plus.mapper-locations=classpath:com/example/hfl/mapper/*.xml
mybatis-plus.type-aliases-package=com.example.hfl.entity

#DevTools热部署
spring.devtools.livereload.enabled=true
spring.devtools.remote.restart.enabled=true
spring.devtools.restart.poll-interval=3000ms
spring.devtools.restart.quiet-period=2999ms


**********com.example.hfl 下项目部署**********
entity
dao
service
controller



-----------------------------------------------------------
********** 额外说明 **********

js获取url传递参数
正则分析法：
https://www.cnblogs.com/h5monkey/p/5912974.html


视频截图(在上传视频的时候就调用截图的功能，并保存图片)
pom.xml：
添加依赖（下载时间有些长，要是一直没下好就关掉编译器重启change）
注意：linux-x86_64改成windows-x86_64，根据自己的情况来

idea：
增加util/VideoImgUtil.java
修改VideoController.java(loadVideo()，getVideoImg())

web：
修改user/First.js


--------------------------------------数据库表--------------------------------------
CREATE TABLE tb_user (
  id int(11) NOT NULL AUTO_INCREMENT,
  name varchar(30) DEFAULT NULL,
  password char(32) DEFAULT NULL,
  age int(3) DEFAULT NULL,
  sex varchar(10) DEFAULT NULL,
  email varchar(50) DEFAULT NULL,
  mobile varchar(230) DEFAULT NULL,
  photourl varchar(60) DEFAULT NULL,
  status varchar(100) DEFAULT NULL,
  regdate timestamp NULL DEFAULT NULL,
  role int(11) DEFAULT '1',
  PRIMARY KEY (id) USING BTREE,
  INDEX name(name) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

INSERT INTO tb_user VALUES ('1', 'admin', 'e10adc3949ba59abbe56e057f20f883e', '22', '女', '962746554@qq.com', '15032408116', 'http://aa', null, '2020-11-07 16:42:10', '0');
INSERT INTO tb_user VALUES ('2', 'liu', 'e10adc3949ba59abbe56e057f20f883e', '22', '女', '962746554@qq.com', '15032408116', 'http://aa', null, '2020-11-07 16:42:10', '1');
INSERT INTO tb_user VALUES ('3', 'rose', 'e10adc3949ba59abbe56e057f20f883e', '22', '女', '962746554@qq.com', '15032408116', 'http://aa', null, '2020-11-07 16:42:10', '1');


CREATE TABLE tb_videotype  (
  id int(11) NOT NULL AUTO_INCREMENT,
  typename varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (id) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

INSERT INTO tb_videotype VALUES ('1', '影视');
INSERT INTO tb_videotype VALUES ('2', '新闻');
INSERT INTO tb_videotype VALUES ('3', '生活');
INSERT INTO tb_videotype VALUES ('4', '美食');
INSERT INTO tb_videotype VALUES ('5', '音乐');

CREATE TABLE tb_video  (
  id int(5) NOT NULL AUTO_INCREMENT,
  typeid int(5) NOT NULL,
  uname varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  title varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  description varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  pubdatetime datetime(0) NOT NULL,
  status varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  videopath varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (id) USING BTREE,
  INDEX vid(id) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;


  PRIMARY KEY (id),
  KEY uname (uname),
  KEY fk_typeid (typeid),
  CONSTRAINT fk_typeid FOREIGN KEY (typeid) REFERENCES tb_videotype (id),
  CONSTRAINT fk_uname FOREIGN KEY (uname) REFERENCES tb_user (name)


INSERT INTO tb_video VALUES ('1', '1', 'liu', '星巴克', '咖啡', '2020-11-07 16:42:10', '未审核','1.mp4');
INSERT INTO tb_video VALUES ('2', '2', 'liu', 'startPark', 'coffe', '2020-10-07 16:42:10', '未审核','tweetsip.mp4');
INSERT INTO tb_video VALUES ('3', '1', 'wang', 'python', '爬虫', '2020-11-07 16:42:10', '审核通过','1.mp4');
INSERT INTO tb_video VALUES ('4', '3', 'rose', '动画', '巴拉巴拉巴拉', '2020-11-07 16:42:10', '未审核','2.mp4');

CREATE TABLE tb_msg  (
  id int(11) NOT NULL AUTO_INCREMENT,
  title varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  content varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  sender varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  receiver varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  time datetime(0) NOT NULL,
  PRIMARY KEY (id) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

title:审核结果|评论|点赞|收藏

CREATE TABLE tb_comment  (
  id int(11) NOT NULL AUTO_INCREMENT,
  vid int(5) NOT NULL,
  comment varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  sender varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  receiver varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  time datetime(0) NOT NULL,
  PRIMARY KEY (id) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;


INSERT INTO tb_comment VALUES ('1', '2', '这是星巴克阿','rose', 'liu', '2020-11-07 16:42:10');
INSERT INTO tb_comment VALUES ('2', '2', '这老头是个逗b吧', 'wang', 'liu', '2020-10-07 16:42:10');
INSERT INTO tb_comment VALUES ('3', '2', '路过～', 'qing', 'liu', '2020-11-07 16:42:10');


CREATE TABLE tb_say (
  id int(11) NOT NULL AUTO_INCREMENT,
  uname varchar(30) NOT NULL,
  vid int(5) NOT NULL,
  time datetime NOT NULL,
  say varchar(255) DEFAULT NULL,
  PRIMARY KEY (id) USING BTREE,
  KEY name (uname) USING BTREE,
  KEY vid (vid),
  CONSTRAINT name FOREIGN KEY (uname) REFERENCES tb_user (name),
  CONSTRAINT vid FOREIGN KEY (vid) REFERENCES tb_video (id)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

SELECT @@IDENTITY AS ID;

SET FOREIGN_KEY_CHECKS = 1;
//https://www.cnblogs.com/loveLands/articles/11298610.html

CREATE TABLE tb_collect (
  id int(11) NOT NULL AUTO_INCREMENT,
  vid int(11) NOT NULL,
  uname varchar(30) DEFAULT NULL,
  PRIMARY KEY (id),
  KEY video_id (vid),
  KEY user_name (uname),
  CONSTRAINT user_name FOREIGN KEY (uname) REFERENCES tb_user (name),
  CONSTRAINT video_id FOREIGN KEY (vid) REFERENCES tb_video (id)
) ENGINE=InnoDB AUTO_INCREMENT=60 DEFAULT CHARSET=utf8;

CREATE TABLE tb_praise (
  id int(11) NOT NULL AUTO_INCREMENT,
  vid int(11) NOT NULL,
  uname varchar(30) DEFAULT NULL,
  PRIMARY KEY (id),
  KEY videoId (vid),
  KEY userName (uname),
  CONSTRAINT userName FOREIGN KEY (uname) REFERENCES tb_user (name),
  CONSTRAINT videoId FOREIGN KEY (vid) REFERENCES tb_video (id)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;

tb_user(uid)
tb_video
tb_u_v(id,uid,vid,)


-----------------------------------------------------------------------------------
---------------------------------------xxx-----------------------------------------
1. 注销：浏览器左右键返回还是原来的账号，没注销成功
*2. 忘记密码？
*3. 最上面的搜索未实现（做模糊查询，根据视频标题或视频描述）
*4. 当前导航未选中和选中的问题
*5. 登录和注册页面做背景动画，各个center背景动画

*6. 有些输入框会有历史记录，设置不可见
*7. 管理端导航
*8. 修改所有的alert标题为对应的操作标题
*9. 点赞,收藏后给发送者发送消息（xxx给你点赞），评论后给发送者发送消息（xxx评论你的xxx视频xxx）

*10. 将动态中心的好友动态，改成广场（显示所有用户上传视频的动态，即在上传的时候在say中保存相关消息）（动态内容变为视频描述，点击foward跳入视频播放界面（有弹幕那个页面））
*11. 将动态中心的我的说说改成我的动态，显示自己上传视频的消息
*12. 消息中心增加其他用户给你点赞和评论的部分(点赞的时候发送)
*13. 头像的问题（可以先空着，要是谁研究出来了就说一声）



-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
### 视频截图
使用到 JavaCV 这个开源的视觉处理库，它是基于GPLv2协议，封装了一些常用库的接口。在项目中主要用于截取视频某一帧，以jpg格式进行存储

知识点：
ffmpeg是媒体文件转换工具，常用于转码，可选择视频时长、帧率、分辨率、像素格式等
BufferedImage是其实现类，一个带缓冲区图像类，主要作用是将一幅图片加载到内存中，方便我们使用其方法功能操作图片，因为BufferedImage生成的图片在内存里有一个图像缓冲区，利用这个缓冲区我们可以很方便地操作这个图片。

好处：用此方法的好处是不需要在服务器上安装插件，直接代码中就可以实现视频截取。

关键过程：
使用FFmpegFrameGrabber对象获取视频文件的帧，由BufferedImage实例化对象，再利用ImageIO的write()方法传入BufferedImage的实例化对象将BufferedImage对象直接写出指定输出流

注：
什么是GPL？
General Public License，什么意思呢，通用性公开许可证，从这个中文翻译上我们可以把GPL看成是软件所遵从或使用的各种许可证中的一种，这里不做详细解释

根据GPL v2的相关规定：只要这种修改文本在整体上或者其某个部分来源于遵循GPL的程序，该修改文本的整体就必须按照GPL流通，不仅该修改文本的源码必须向社会公开，而且对于这种修改文本的流通不准许附加修改者自己作出的限制

使用java.io.File.delete()函数:删除此抽象路径名表示的文件或目录

### 

-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------

















